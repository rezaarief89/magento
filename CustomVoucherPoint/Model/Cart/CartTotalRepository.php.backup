<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
namespace Fef\CustomVoucherPoint\Model\Cart;

use Magento\Quote\Api;
use Magento\Quote\Api\CartRepositoryInterface;
use Magento\Quote\Api\CartTotalRepositoryInterface;
use Magento\Framework\Api\DataObjectHelper;
use Magento\Framework\Api\ExtensibleDataInterface;
use Magento\Quote\Model\Cart\Totals\ItemConverter;
use Magento\Quote\Model\Cart\TotalsConverter;
use Magento\Quote\Api\CouponManagementInterface;
use Magento\Catalog\Model\ProductFactory;

/**
 * Cart totals data object.
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class CartTotalRepository extends \Magento\Quote\Model\Cart\CartTotalRepository
{
    /**
     * Cart totals factory.
     *
     * @var Api\Data\TotalsInterfaceFactory
     */
    private $totalsFactory;

    /**
     * Quote repository.
     *
     * @var \Magento\Quote\Api\CartRepositoryInterface
     */
    private $quoteRepository;

    /**
     * @var \Magento\Framework\Api\DataObjectHelper
     */
    private $dataObjectHelper;

    /**
     * @var ItemConverter
     */
    private $itemConverter;

    /**
     * @var CouponManagementInterface
     */
    protected $couponService;

    /**
     * @var TotalsConverter
     */
    protected $totalsConverter;

    /**
     * @param Api\Data\TotalsInterfaceFactory $totalsFactory
     * @param CartRepositoryInterface $quoteRepository
     * @param DataObjectHelper $dataObjectHelper
     * @param CouponManagementInterface $couponService
     * @param TotalsConverter $totalsConverter
     * @param ItemConverter $converter
     */
    public function __construct(
        Api\Data\TotalsInterfaceFactory $totalsFactory,
        CartRepositoryInterface $quoteRepository,
        DataObjectHelper $dataObjectHelper,
        CouponManagementInterface $couponService,
        TotalsConverter $totalsConverter,
        ItemConverter $converter
    ) {
        $this->totalsFactory = $totalsFactory;
        $this->quoteRepository = $quoteRepository;
        $this->dataObjectHelper = $dataObjectHelper;
        $this->couponService = $couponService;
        $this->totalsConverter = $totalsConverter;
        $this->itemConverter = $converter;
    }

    /**
     * @inheritdoc
     *
     * @param int $cartId The cart ID.
     * @return Totals Quote totals data.
     */
    public function get($cartId)
    {

        $writer = new \Zend_Log_Writer_Stream(BP.'/var/log/cart-coupon.log');
        $logger = new \Zend_Log();
        $logger->addWriter($writer);
        $logger->info("getX : $cartId");

        /** @var \Magento\Quote\Model\Quote $quote */
        $quote = $this->quoteRepository->getActive($cartId);
        if ($quote->isVirtual()) {
            $addressTotalsData = $quote->getBillingAddress()->getData();
            $addressTotals = $quote->getBillingAddress()->getTotals();
        } else {
            $addressTotalsData = $quote->getShippingAddress()->getData();
            $addressTotals = $quote->getShippingAddress()->getTotals();
        }
        
        unset($addressTotalsData[ExtensibleDataInterface::EXTENSION_ATTRIBUTES_KEY]);

        /** @var \Magento\Quote\Api\Data\TotalsInterface $quoteTotals */
        $quoteTotals = $this->totalsFactory->create();
        $this->dataObjectHelper->populateWithArray(
            $quoteTotals,
            $addressTotalsData,
            \Magento\Quote\Api\Data\TotalsInterface::class
        );
        $items = [];
        // $finalPrice = 1;
        foreach ($quote->getAllVisibleItems() as $index => $item) 
        {
            // $item->setPrice($finalPrice);
            // $item->setBasePrice($finalPrice);
            // $item->setCustomPrice($finalPrice);
            // $item->setOriginalCustomPrice($finalPrice);
            // $item->save();
            
            $items[$index] = $this->itemConverter->modelToDataObject($item);
        }

        // $objectManager = \Magento\Framework\App\ObjectManager::getInstance();   
        // $customerSession = $objectManager->get('\Magento\Customer\Model\Session');
        // $customHelper = $objectManager->get('\Fef\CustomVoucherPoint\Helper\Data');
        // $voucherPointUsedFactory = $objectManager->get('\Fef\CustomVoucherPoint\Model\VoucherPointUsedFactory');
        // $CalculateTempFactory = $objectManager->get('\Fef\CustomVoucherPoint\Model\CalculateTempFactory');
        // $urlInterface = $objectManager->get('\Magento\Framework\UrlInterface');

        // $customerId = $quote->getCustomerId();
        // $quoteId = $quote->getId();

        // $pointUsed = $voucherPointUsedFactory->create();
        // $pointUsedCollection = $pointUsed
        // ->getCollection()
        // ->addFieldToFilter('customer_id', $customerId)
        // ->addFieldToFilter('quote_id', $quoteId);
        // $dataCollection = $pointUsedCollection->getData();
        // if(count($dataCollection) > 0){
        //     // $logger->info("masuk : ".$urlInterface->getCurrentUrl()." || ".$customerSession->getId()." || ".$quote->getId());
        //     if((int)$quote->getData('zokurewards_point') > 0){
        //         $customHelper->calculateOrder($dataCollection[0]["used_voucher"],$quote->getData('zokurewards_point'));
        //     }else{
        //         $customHelper->calculateOrder($dataCollection[0]["used_voucher"],0);
        //     }
        // }else{
        //     if((int)$quote->getData('zokurewards_point') > 0){
        //         $customHelper->calculateOrder("",$quote->getData('zokurewards_point'));
        //     }else{
        //         $customHelper->calculateOrder("",0);
        //     }
        // }

        // $quote->collectTotals();
        

        $calculatedTotals = $this->totalsConverter->process($addressTotals);
        $quoteTotals->setTotalSegments($calculatedTotals);

        $amount = $quoteTotals->getGrandTotal() - $quoteTotals->getTaxAmount();
        $amount = $amount > 0 ? $amount : 0;
        $amount = 15;

        $quoteTotals->setCouponCode($this->couponService->get($cartId));
        $quoteTotals->setGrandTotal($amount);
        $quoteTotals->setItems($items);
        $quoteTotals->setItemsQty($quote->getItemsQty());
        $quoteTotals->setBaseCurrencyCode($quote->getBaseCurrencyCode());
        $quoteTotals->setQuoteCurrencyCode($quote->getQuoteCurrencyCode());
        return $quoteTotals;
    }
}
